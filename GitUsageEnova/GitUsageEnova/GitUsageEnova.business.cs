
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.CRM;
using GitCommits;
using GitUsageEnova;

[assembly: ModuleType("Git", typeof(GitCommits.GitModule), 4, "GitCommit", 2, VersionNumber=1)]

namespace GitCommits {

	/// <summary>
	/// Moduł Git.
	/// <seealso cref="Soneta.CRM"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class GitModule : Module {

		public static GitModule GetInstance(ISessionable session) => (GitModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new GitModule(session)) {
		};

		GitModule(Session session) : base(session) {}

		private CRMModule moduleCRM;

		[Browsable(false)]
		public CRMModule CRM => moduleCRM ?? (moduleCRM = CRMModule.GetInstance(Session));

		private static Soneta.Business.App.TableInfo tableInfoCommitsPerDay = new Soneta.Business.App.TableInfo.Create<CommitsPerDay, CommitPerDay, CommitPerDayRecord>("CommitPe") {
		};

		public CommitsPerDay CommitsPerDay => (CommitsPerDay)Session.Tables[tableInfoCommitsPerDay];

		private static Soneta.Business.App.KeyInfo keyInfoCommitPerDayWgKod = new Soneta.Business.App.KeyInfo(tableInfoCommitsPerDay, table => new CommitPerDayTable.WgKodKey(table)) {
			Name = "WgKod",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"IdCommit"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów CommitPerDay.
		/// Dziedzicząca klasa <see cref="CommitsPerDay"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="CommitsPerDay"/>
		/// <seealso cref="CommitPerDayRow"/>
		/// <seealso cref="CommitPerDay"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela z ilością commitów na dzień")]
		public abstract partial class CommitPerDayTable : GuidedTable {

			protected CommitPerDayTable() {}

			public class WgKodKey : Key<CommitPerDay> {
				internal WgKodKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((CommitPerDayRecord)rec).IdCommit.TrimEnd()
				};

				public CommitPerDay this[string idcommit] => (CommitPerDay)Find(idcommit);
			}

			public WgKodKey WgKod => (WgKodKey)Session.Keys[keyInfoCommitPerDayWgKod];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="GitModule"/>
			public new GitModule Module => (GitModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="CommitPerDay"/>
			public new CommitPerDay this[int id] => (CommitPerDay)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="CommitPerDay"/>
			public new CommitPerDay[] this[int[] ids] => (CommitPerDay[])base[ids];

			public new CommitPerDay this[Guid guid] => (CommitPerDay)base[guid];

			protected override Row CreateRow(RowCreator creator) => new CommitPerDay();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("IdCommit");
				names.Append(divider); names.Append("Data");
				names.Append(divider); names.Append("Osoba");
				names.Append(divider); names.Append("Ilosc");
			}

		}

		public abstract partial class CommitPerDayRow : GuidedRow {

			private CommitPerDayRecord record;

			protected override void AssignRecord(Record rec) {
				record = (CommitPerDayRecord)rec;
			}

			protected CommitPerDayRow() : base(true) {
			}

			[MaxLength(80)]
			[Required]
			public string IdCommit {
				get {
					if (record==null) GetRecord();
					return record.IdCommit;
				}
				set {
					CommitPerDaySchema.IdCommitBeforeEdit?.Invoke((CommitPerDay)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "IdCommit");
					if (value.Length>IdCommitLength) throw new ValueToLongException(this, "IdCommit", IdCommitLength);
					GetEdit(record==null, false);
					record.IdCommit = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoCommitPerDayWgKod);
					}
					CommitPerDaySchema.IdCommitAfterEdit?.Invoke((CommitPerDay)this);
				}
			}

			public const int IdCommitLength = 80;

			[Required]
			public DateTime Data {
				get {
					if (record==null) GetRecord();
					return record.Data;
				}
				set {
					CommitPerDaySchema.DataBeforeEdit?.Invoke((CommitPerDay)this, ref value);
					if (value==DateTime.MinValue) throw new RequiredException(this, "Data");
					GetEdit(record==null, false);
					record.Data = value;
					CommitPerDaySchema.DataAfterEdit?.Invoke((CommitPerDay)this);
				}
			}

			[MaxLength(80)]
			[Required]
			public string Osoba {
				get {
					if (record==null) GetRecord();
					return record.Osoba;
				}
				set {
					CommitPerDaySchema.OsobaBeforeEdit?.Invoke((CommitPerDay)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Osoba");
					if (value.Length>OsobaLength) throw new ValueToLongException(this, "Osoba", OsobaLength);
					GetEdit(record==null, false);
					record.Osoba = value;
					CommitPerDaySchema.OsobaAfterEdit?.Invoke((CommitPerDay)this);
				}
			}

			public const int OsobaLength = 80;

			[Required]
			public int Ilosc {
				get {
					if (record==null) GetRecord();
					return record.Ilosc;
				}
				set {
					CommitPerDaySchema.IloscBeforeEdit?.Invoke((CommitPerDay)this, ref value);
					if (value==0) throw new RequiredException(this, "Ilosc");
					GetEdit(record==null, false);
					record.Ilosc = value;
					CommitPerDaySchema.IloscAfterEdit?.Invoke((CommitPerDay)this);
				}
			}

			[Browsable(false)]
			public new CommitsPerDay Table => (CommitsPerDay)base.Table;

			[Browsable(false)]
			public GitModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoCommitsPerDay;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				CommitPerDaySchema.OnCalcObjectRight?.Invoke((CommitPerDay)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				CommitPerDaySchema.OnCalcParentsObjectRight?.Invoke((CommitPerDay)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				CommitPerDaySchema.OnCalcReadOnly?.Invoke((CommitPerDay)this, ref result);
				return result;
			}

			class IdCommitRequiredVerifier : RequiredVerifier {
				internal IdCommitRequiredVerifier(IRow row) : base(row, "IdCommit") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((CommitPerDayRow)Row).IdCommit));
			}

			class DataRequiredVerifier : RequiredVerifier {
				internal DataRequiredVerifier(IRow row) : base(row, "Data") {
				}
				protected override bool IsValid() => !(((CommitPerDayRow)Row).Data==DateTime.MinValue);
			}

			class OsobaRequiredVerifier : RequiredVerifier {
				internal OsobaRequiredVerifier(IRow row) : base(row, "Osoba") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((CommitPerDayRow)Row).Osoba));
			}

			class IloscRequiredVerifier : RequiredVerifier {
				internal IloscRequiredVerifier(IRow row) : base(row, "Ilosc") {
				}
				protected override bool IsValid() => !(((CommitPerDayRow)Row).Ilosc==0);
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new IdCommitRequiredVerifier(this));
				Session.Verifiers.Add(new DataRequiredVerifier(this));
				Session.Verifiers.Add(new OsobaRequiredVerifier(this));
				Session.Verifiers.Add(new IloscRequiredVerifier(this));
				CommitPerDaySchema.OnAdded?.Invoke((CommitPerDay)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				CommitPerDaySchema.OnLoaded?.Invoke((CommitPerDay)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				CommitPerDaySchema.OnEditing?.Invoke((CommitPerDay)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				CommitPerDaySchema.OnDeleting?.Invoke((CommitPerDay)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				CommitPerDaySchema.OnDeleted?.Invoke((CommitPerDay)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				CommitPerDaySchema.OnRepacked?.Invoke((CommitPerDay)this);
			}

		}

		public sealed class CommitPerDayRecord : GuidedRecord {
			[Required]
			[MaxLength(80)]
			public string IdCommit = "";
			[Required]
			public DateTime Data;
			[Required]
			[MaxLength(80)]
			public string Osoba = "";
			[Required]
			public int Ilosc;

			public override Record Clone() {
				CommitPerDayRecord rec = (CommitPerDayRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				IdCommit = creator.Read_string();
				Data = creator.Read_datetime();
				Osoba = creator.Read_string();
				Ilosc = creator.Read_int();
			}
		}

		public static class CommitPerDaySchema {

			internal static RowDelegate<CommitPerDayRow, string> IdCommitBeforeEdit;
			public static void AddIdCommitBeforeEdit(RowDelegate<CommitPerDayRow, string> value)
				=> IdCommitBeforeEdit = (RowDelegate<CommitPerDayRow, string>)Delegate.Combine(IdCommitBeforeEdit, value);

			internal static RowDelegate<CommitPerDayRow> IdCommitAfterEdit;
			public static void AddIdCommitAfterEdit(RowDelegate<CommitPerDayRow> value)
				=> IdCommitAfterEdit = (RowDelegate<CommitPerDayRow>)Delegate.Combine(IdCommitAfterEdit, value);

			internal static RowDelegate<CommitPerDayRow, DateTime> DataBeforeEdit;
			public static void AddDataBeforeEdit(RowDelegate<CommitPerDayRow, DateTime> value)
				=> DataBeforeEdit = (RowDelegate<CommitPerDayRow, DateTime>)Delegate.Combine(DataBeforeEdit, value);

			internal static RowDelegate<CommitPerDayRow> DataAfterEdit;
			public static void AddDataAfterEdit(RowDelegate<CommitPerDayRow> value)
				=> DataAfterEdit = (RowDelegate<CommitPerDayRow>)Delegate.Combine(DataAfterEdit, value);

			internal static RowDelegate<CommitPerDayRow, string> OsobaBeforeEdit;
			public static void AddOsobaBeforeEdit(RowDelegate<CommitPerDayRow, string> value)
				=> OsobaBeforeEdit = (RowDelegate<CommitPerDayRow, string>)Delegate.Combine(OsobaBeforeEdit, value);

			internal static RowDelegate<CommitPerDayRow> OsobaAfterEdit;
			public static void AddOsobaAfterEdit(RowDelegate<CommitPerDayRow> value)
				=> OsobaAfterEdit = (RowDelegate<CommitPerDayRow>)Delegate.Combine(OsobaAfterEdit, value);

			internal static RowDelegate<CommitPerDayRow, int> IloscBeforeEdit;
			public static void AddIloscBeforeEdit(RowDelegate<CommitPerDayRow, int> value)
				=> IloscBeforeEdit = (RowDelegate<CommitPerDayRow, int>)Delegate.Combine(IloscBeforeEdit, value);

			internal static RowDelegate<CommitPerDayRow> IloscAfterEdit;
			public static void AddIloscAfterEdit(RowDelegate<CommitPerDayRow> value)
				=> IloscAfterEdit = (RowDelegate<CommitPerDayRow>)Delegate.Combine(IloscAfterEdit, value);

			internal static RowDelegate<CommitPerDayRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<CommitPerDayRow> value)
				=> OnLoaded = (RowDelegate<CommitPerDayRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<CommitPerDayRow> OnAdded;
			public static void AddOnAdded(RowDelegate<CommitPerDayRow> value)
				=> OnAdded = (RowDelegate<CommitPerDayRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<CommitPerDayRow> OnEditing;
			public static void AddOnEditing(RowDelegate<CommitPerDayRow> value)
				=> OnEditing = (RowDelegate<CommitPerDayRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<CommitPerDayRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<CommitPerDayRow> value)
				=> OnDeleting = (RowDelegate<CommitPerDayRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<CommitPerDayRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<CommitPerDayRow> value)
				=> OnDeleted = (RowDelegate<CommitPerDayRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<CommitPerDayRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<CommitPerDayRow> value)
				=> OnRepacked = (RowDelegate<CommitPerDayRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<CommitPerDayRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<CommitPerDayRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<CommitPerDayRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<CommitPerDayRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<CommitPerDayRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<CommitPerDayRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<CommitPerDayRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<CommitPerDayRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<CommitPerDayRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoAveragesPerDay = new Soneta.Business.App.TableInfo.Create<AveragesPerDay, AveragePerDay, AveragePerDayRecord>("AverageP") {
		};

		public AveragesPerDay AveragesPerDay => (AveragesPerDay)Session.Tables[tableInfoAveragesPerDay];

		private static Soneta.Business.App.KeyInfo keyInfoAveragePerDayWgKodAverage = new Soneta.Business.App.KeyInfo(tableInfoAveragesPerDay, table => new AveragePerDayTable.WgKodAverageKey(table)) {
			Name = "WgKodAverage",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Osoba"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów AveragePerDay.
		/// Dziedzicząca klasa <see cref="AveragesPerDay"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="AveragesPerDay"/>
		/// <seealso cref="AveragePerDayRow"/>
		/// <seealso cref="AveragePerDay"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela z średnią ilością commitów na dzień")]
		public abstract partial class AveragePerDayTable : GuidedTable {

			protected AveragePerDayTable() {}

			public class WgKodAverageKey : Key<AveragePerDay> {
				internal WgKodAverageKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((AveragePerDayRecord)rec).Osoba.TrimEnd()
				};

				public AveragePerDay this[string osoba] => (AveragePerDay)Find(osoba);
			}

			public WgKodAverageKey WgKodAverage => (WgKodAverageKey)Session.Keys[keyInfoAveragePerDayWgKodAverage];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="GitModule"/>
			public new GitModule Module => (GitModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="AveragePerDay"/>
			public new AveragePerDay this[int id] => (AveragePerDay)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="AveragePerDay"/>
			public new AveragePerDay[] this[int[] ids] => (AveragePerDay[])base[ids];

			public new AveragePerDay this[Guid guid] => (AveragePerDay)base[guid];

			protected override Row CreateRow(RowCreator creator) => new AveragePerDay();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Osoba");
				names.Append(divider); names.Append("Ilosc");
			}

		}

		public abstract partial class AveragePerDayRow : GuidedRow {

			private AveragePerDayRecord record;

			protected override void AssignRecord(Record rec) {
				record = (AveragePerDayRecord)rec;
			}

			protected AveragePerDayRow() : base(true) {
			}

			[MaxLength(80)]
			[Required]
			public string Osoba {
				get {
					if (record==null) GetRecord();
					return record.Osoba;
				}
				set {
					AveragePerDaySchema.OsobaBeforeEdit?.Invoke((AveragePerDay)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Osoba");
					if (value.Length>OsobaLength) throw new ValueToLongException(this, "Osoba", OsobaLength);
					GetEdit(record==null, false);
					record.Osoba = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoAveragePerDayWgKodAverage);
					}
					AveragePerDaySchema.OsobaAfterEdit?.Invoke((AveragePerDay)this);
				}
			}

			public const int OsobaLength = 80;

			[Required]
			public int Ilosc {
				get {
					if (record==null) GetRecord();
					return record.Ilosc;
				}
				set {
					AveragePerDaySchema.IloscBeforeEdit?.Invoke((AveragePerDay)this, ref value);
					if (value==0) throw new RequiredException(this, "Ilosc");
					GetEdit(record==null, false);
					record.Ilosc = value;
					AveragePerDaySchema.IloscAfterEdit?.Invoke((AveragePerDay)this);
				}
			}

			[Browsable(false)]
			public new AveragesPerDay Table => (AveragesPerDay)base.Table;

			[Browsable(false)]
			public GitModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoAveragesPerDay;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				AveragePerDaySchema.OnCalcObjectRight?.Invoke((AveragePerDay)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				AveragePerDaySchema.OnCalcParentsObjectRight?.Invoke((AveragePerDay)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				AveragePerDaySchema.OnCalcReadOnly?.Invoke((AveragePerDay)this, ref result);
				return result;
			}

			class OsobaRequiredVerifier : RequiredVerifier {
				internal OsobaRequiredVerifier(IRow row) : base(row, "Osoba") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((AveragePerDayRow)Row).Osoba));
			}

			class IloscRequiredVerifier : RequiredVerifier {
				internal IloscRequiredVerifier(IRow row) : base(row, "Ilosc") {
				}
				protected override bool IsValid() => !(((AveragePerDayRow)Row).Ilosc==0);
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new OsobaRequiredVerifier(this));
				Session.Verifiers.Add(new IloscRequiredVerifier(this));
				AveragePerDaySchema.OnAdded?.Invoke((AveragePerDay)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				AveragePerDaySchema.OnLoaded?.Invoke((AveragePerDay)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				AveragePerDaySchema.OnEditing?.Invoke((AveragePerDay)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				AveragePerDaySchema.OnDeleting?.Invoke((AveragePerDay)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				AveragePerDaySchema.OnDeleted?.Invoke((AveragePerDay)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				AveragePerDaySchema.OnRepacked?.Invoke((AveragePerDay)this);
			}

		}

		public sealed class AveragePerDayRecord : GuidedRecord {
			[Required]
			[MaxLength(80)]
			public string Osoba = "";
			[Required]
			public int Ilosc;

			public override Record Clone() {
				AveragePerDayRecord rec = (AveragePerDayRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Osoba = creator.Read_string();
				Ilosc = creator.Read_int();
			}
		}

		public static class AveragePerDaySchema {

			internal static RowDelegate<AveragePerDayRow, string> OsobaBeforeEdit;
			public static void AddOsobaBeforeEdit(RowDelegate<AveragePerDayRow, string> value)
				=> OsobaBeforeEdit = (RowDelegate<AveragePerDayRow, string>)Delegate.Combine(OsobaBeforeEdit, value);

			internal static RowDelegate<AveragePerDayRow> OsobaAfterEdit;
			public static void AddOsobaAfterEdit(RowDelegate<AveragePerDayRow> value)
				=> OsobaAfterEdit = (RowDelegate<AveragePerDayRow>)Delegate.Combine(OsobaAfterEdit, value);

			internal static RowDelegate<AveragePerDayRow, int> IloscBeforeEdit;
			public static void AddIloscBeforeEdit(RowDelegate<AveragePerDayRow, int> value)
				=> IloscBeforeEdit = (RowDelegate<AveragePerDayRow, int>)Delegate.Combine(IloscBeforeEdit, value);

			internal static RowDelegate<AveragePerDayRow> IloscAfterEdit;
			public static void AddIloscAfterEdit(RowDelegate<AveragePerDayRow> value)
				=> IloscAfterEdit = (RowDelegate<AveragePerDayRow>)Delegate.Combine(IloscAfterEdit, value);

			internal static RowDelegate<AveragePerDayRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<AveragePerDayRow> value)
				=> OnLoaded = (RowDelegate<AveragePerDayRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<AveragePerDayRow> OnAdded;
			public static void AddOnAdded(RowDelegate<AveragePerDayRow> value)
				=> OnAdded = (RowDelegate<AveragePerDayRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<AveragePerDayRow> OnEditing;
			public static void AddOnEditing(RowDelegate<AveragePerDayRow> value)
				=> OnEditing = (RowDelegate<AveragePerDayRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<AveragePerDayRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<AveragePerDayRow> value)
				=> OnDeleting = (RowDelegate<AveragePerDayRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<AveragePerDayRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<AveragePerDayRow> value)
				=> OnDeleted = (RowDelegate<AveragePerDayRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<AveragePerDayRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<AveragePerDayRow> value)
				=> OnRepacked = (RowDelegate<AveragePerDayRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<AveragePerDayRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<AveragePerDayRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<AveragePerDayRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<AveragePerDayRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<AveragePerDayRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<AveragePerDayRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<AveragePerDayRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<AveragePerDayRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<AveragePerDayRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsGitModule {
		public static GitModule GetGit(this Session session) => GitModule.GetInstance(session);
	}

}

